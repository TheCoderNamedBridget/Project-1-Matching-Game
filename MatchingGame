
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Random;
import java.util.Scanner;

/**
 *Author: Bridget Naylor
 *Date: 2/2/20
 *Description: Basic memory card game
 * User can enter integer value of card location, flip two valid card locations 
 * Program then keeps them face up if the numbers match or flips them over if the numbers do not match
 * 
 * */
public class MemoryGame {

	public static void main( String[] args ) {
		boolean playAgain = true;
		while ( playAgain ) {
			String[][] deck = new String[ 4 ][ 4 ];
			
			boolean[][] flippedCards = new boolean[ 4 ][ 4 ];
			
			boolean gameOver = false;
			
			int matchNumber = 0;
			
			int fileChoice = getFileChoice();
			
			readFile( fileChoice, deck );
			
			shuffle( deck );
			
			for ( int i = 0; i < flippedCards[0].length; i++ ) {
				
				for ( int g = 0; g < flippedCards[0].length; g++ ) {
					
					flippedCards[ i ][ g ] = false;
					
				}
			}
			
			while ( !gameOver ) {
				
				displayBoard( deck, flippedCards );

				
				int firstCardChosen = getChoice();
				
				while ( checkFlipped( firstCardChosen, flippedCards) ) {
					
					System.out.println( "Card is already flipped. Enter new value ");
					
					firstCardChosen = getChoice();
					
				}
				
				flipChoice( firstCardChosen, flippedCards);
				
				displayBoard( deck, flippedCards );
				
				
				int secondCardChosen = getChoice();
				
				while ( checkFlipped( secondCardChosen, flippedCards) ) {
					
					System.out.println( "Card is already flipped. Enter new value ");
					
					secondCardChosen = getChoice();
					
				}
				
				flipChoice( secondCardChosen, flippedCards);
				
				displayBoard( deck, flippedCards );
				
				
				
				if ( isMatch( firstCardChosen, secondCardChosen, deck )) {
					
					System.out.println( "You got a match!" );

					matchNumber += 1;
					
					if ( matchNumber == 8 ) {
						
						System.out.println( "You Won!!! Play Again? ");
						
						boolean yesOrNo = CheckInput.getYesNo();
						
						if ( yesOrNo ) {
							
							break;
							
						} else {
							
							playAgain = false;
							
						}
					}
					
				} else {
					
					System.out.println( "Not a match!" );
					
					flippedCards[ firstCardChosen / 4 ][ firstCardChosen % 4 ] = false;
					
					flippedCards[ secondCardChosen / 4 ][ secondCardChosen % 4 ] = false;	
					
				}
				
			}
			

		}
		
	}
	
	/**
	 *  display a menu listing the files for the types of card values,
	 *  prompt the user for their choice and return their selection
	 *  @return the deck the user chooses
	 * */
	public static int getFileChoice() {
		
		System.out.println( "Memory Game" );
		
		System.out.println( "1. Letters" );
		
		System.out.println( "2. Numbers" );
		
		System.out.println( "3. Animals" );
		
		System.out.println( "4. Objects" );
		
		System.out.println( "Enter Choice: " );
		
		Scanner in = new Scanner( System.in );

		int userChoice = CheckInput.getIntRange( 1, 4 );
		
		return userChoice;
	}
	
	/**
	 *  Pass in the user’s file selection and the 2D array of Strings.  
	 *  Read in the file’s contents and place two of each card value in the array
	 *  @param int userFile selection
	 *  @param String[][] array the empty deck
	 * */
	public static void readFile( int fileChosen, String[][] deck ) {
		
		System.out.println( "File Chosen " + fileChosen );
		
	    try {
	    	File myObj = null;
	    	
	    	if ( fileChosen == 1 ) {
	    		
	    		myObj = new File( "letters" );
	    		
	    	} else if ( fileChosen == 2 ) {
	    		
	    		myObj = new File( "numbers" );
	    		
	    	} else if ( fileChosen == 3 ) {
	    		
	    		myObj = new File( "animals" );
	    		
	    	} else if ( fileChosen == 4 ) {
	    		
	    		myObj = new File( "objects" );
	    		
	    	}
	        
	        
	        Scanner myReader = new Scanner( myObj );
	        
	        String data = "";
	        
	        for ( int i = 0; i < deck[ 0 ].length; i++ ) {
	        	
	        	for ( int k = 0; k < deck[ 0 ].length; k++ ) {
	        		
		        	if ( k % 2 == 0 ) {
		        		
		        		data = myReader.nextLine();
		        		
		        	}
		        	
		        	deck[ i ][ k ] = data;
	        		
	        	}
	        }
	        
	        myReader.close();
	        
	      } catch (FileNotFoundException e) {
	    	  
	        System.out.println( "An error occurred." );
	        
	        e.printStackTrace();
	        
	      }
	}
	
	/**
	 *  Pass in the 2D array of Strings, then repeatedly (~100 times) 
	 *  choose two random locations in the array and swap the card values
	 *  @param 2D array of card values
	 * */
	public static void shuffle( String[][] array ) {
		//use random get two random location and swap values in those locations
		
		for ( int i = 0; i < 100; i++ ) {
			
	        Random rand = new Random(); 
	        
	        // Generate random integers in range 0 to 999 
	        int rand_int1 = rand.nextInt( 15 );
	        
	        int rand_int2 = rand.nextInt( 15 );
	        
	        if ( rand_int1 == rand_int2 ) {
	        	
	        	rand_int2 = rand.nextInt( 15 );
	        	
	        }
	        
	        String firstValue = array[ rand_int1 / 4 ][ rand_int1 % 4 ];
	        
	        String secondValue = array[ rand_int2 / 4 ][ rand_int2 % 4 ];
	        
	        array[ rand_int1 / 4 ][ rand_int1 % 4 ] = secondValue;
	        
	        array[ rand_int2 / 4 ][ rand_int2 % 4 ] = firstValue;
	        
	        
		}
		
	}
	
	/**
	 *  Pass both 2D arrays, display the board in a 4x4 configuration 
	 *  similar to the example output below.If the card is face up, display 
	 *  the card’s value, if it is face down, display the card’s number (1-16).
	 *  @param 2D array of boolean values
	 *  @param 2D array of card values
	 * */
	public static void displayBoard( String[][] deck, boolean[][] flippedCards) {
		
        for ( int i = 0; i < deck[ 0 ].length; i++ ) {
        	
    		System.out.println( "+----+ +----+ +----+ +----+" );
    		
    		System.out.println( "|    | |    | |    | |    |" );
    		
        	for ( int k = 0; k < deck[ 0 ].length; k++ ) {
        		

        		
	        	if ( flippedCards[ i ][ k ] == true ) {
	        		
	        		System.out.print( "|" + deck[ i ][ k ] + "| " );

	        	} else {// # / 4 = row col = # % 4
	        		
	        		int cardPositionNumber = ( i * 4 ) + ( k ) + 1;
 
	        		if ( cardPositionNumber < 10 ) {
	        			
	        			System.out.print( "| " + cardPositionNumber + "  | " );
	        			
	        		} else {
	        			
	        			System.out.print( "| " + cardPositionNumber + " | " );
	        			
	        		}
	        		
	        	}
	        	
        	}
        	
    		System.out.println( "\r\n" + "|    | |    | |    | |    |" );
    		
    		System.out.println( "+----+ +----+ +----+ +----+" );
    		
        }
        
	}
	
	/**
	 *gets the user’s input for which card they choose.  Return their selection.  
	 *Check that the input is an integer within the range 1-16
	 *@return user card choice location
	 **/
	public static int getChoice() {
		
		Scanner in = new Scanner( System.in );

		int userChoice = CheckInput.getIntRange( 1, 16 );
		
		return (userChoice - 1);
		
	}
	
	/**
	 *pass in the user’s choice, and the 2D array of booleans, 
	 *then flip over that card.
	 *@param int userChose card location to flip
	 **/
	public static void flipChoice( int userChoice, boolean[][] flippedCards) {
        
		flippedCards[ userChoice / 4 ][ userChoice % 4 ] = true;
		
	}
	
	/**
	 *  Pass in the two cards the user chose and the 2D array of Strings, 
	 *  return true if they are a match
	 *  @param int userChose card location 1
	 *  @param int userChose card location 2
	 *  @return if cards value match return true else false
	 * */
	public static boolean isMatch(int cardOne, int cardTwo, String[][] deck ) {
		
		if ( deck[ cardOne / 4 ][ cardOne % 4 ] == deck[ cardTwo / 4 ][ cardTwo % 4 ] ) {
			
			return true;
			
		} 
		
		return false;
		
	}
	
	/**
	 *  Pass in the user’s choice and the 2D array of booleans, 
	 *  return true if the card is already flipped up
	 *  @param int userChose card location
	 *  @param boolean[][] flipped cards
	 *  @return if current card chosen is already flipped(true) or unflipped(false)
	 * */
	public static boolean checkFlipped( int userChoice, boolean[][] flippedCards ) {
		
		if ( flippedCards[ userChoice / 4 ][ userChoice % 4 ] ) {
			return true;
		} 
		return false;
		
	}
	
	
}
